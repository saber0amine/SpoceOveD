pipeline {
    agent any

    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/saber0amine/SpoceOveD.git', description: 'Git repository URL')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build')
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                git branch: params.BRANCH, url: params.REPO_URL
            }
        }

        stage('Run SAST Scanner') {
            steps {
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
                    sh '''
                    mvn clean verify sonar:sonar \
                    -Dsonar.projectKey=project-ama \
                    -Dsonar.organization=amasoft \
                    -Dsonar.host.url=https://sonarcloud.io \
                    -Dsonar.token=$SONAR_TOKEN
                    '''
                }
            }
        }

        stage('Run SCA Analysis using Snyk') {
            steps {
                withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
                    sh '''
                    echo "Starting Snyk analysis..."
                    echo "Workspace contents:"
                    ls -la $WORKSPACE

                    # Run Snyk with increased memory and timeout
                    docker run --rm -v "$WORKSPACE":/app \
                               -e SNYK_TOKEN="$SNYK_TOKEN" \
                               --memory=4g \
                               --memory-swap=4g \
                               --cpus=2 \
                               --timeout=30m \
                               snyk_image:latest sh -c "
                        echo 'Snyk version:' && snyk --version &&
                        echo 'Authenticating Snyk...' &&
                        snyk auth $SNYK_TOKEN &&
                        echo 'Running Snyk test...' &&
                        cd /app &&
                        snyk test --debug --all-projects
                    "

                    echo "Snyk analysis completed."
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean install -e'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying the application'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            sh '''
            echo "Pipeline failed. Printing system information:"
            echo "System memory usage:"
            free -m
            echo "Disk usage:"
            df -h
            echo "Docker info:"
            docker info
            echo "Recent Docker container logs:"
            docker ps -a
            docker logs $(docker ps -aq | head -n 1)
            '''
        }
    }
}