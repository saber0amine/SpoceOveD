pipeline {
    agent any

    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/saber0amine/SpoceOveD.git', description: 'Git repository URL')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build')
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                git branch: params.BRANCH, url: params.REPO_URL
            }
        }

        stage('Run SAST Scanner') {
            steps {
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
                    sh '''
                    mvn clean verify sonar:sonar \
                    -Dsonar.projectKey=project-ama \
                    -Dsonar.organization=amasoft \
                    -Dsonar.host.url=https://sonarcloud.io \
                    -Dsonar.token=$SONAR_TOKEN
                    '''
                }
            }
        }

        stage('Run SCA Analysis using Snyk') {
            steps {
                withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
                    sh '''
                    # Remove any existing snyk_container
                    docker rm -f snyk_container || true

                    # Start a new Snyk container with increased memory limit
                    docker run -d --name snyk_container -m 1g -v "$WORKSPACE":/app snyk_image:latest tail -f /dev/null

                    # Print container info for debugging
                    docker inspect snyk_container

                    # Run Snyk commands with increased logging
                    docker exec -i snyk_container /bin/sh -c "snyk auth $SNYK_TOKEN && cd /app && snyk test --debug"

                    # Print container logs
                    docker logs snyk_container

                    # Remove the Snyk container
                    docker rm -f snyk_container
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean install -e'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying the application'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            sh '''
            # Print system resource usage
            echo "System memory usage:"
            free -m
            echo "Disk usage:"
            df -h
            '''
        }
    }
}